#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on Ubuntu             #
#                                                                    #
#                Author: TinyActive - Base On HOSTVN.VN Scripts      #
#                  Website: https://github.com/TinyActive/panel      #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

source /var/hostvn/menu/helpers/variable_php
source /var/hostvn/menu/validate/rule
source /var/hostvn/menu/helpers/function

# Default settings for Varnish installation
VARNISH_VERSION="7.7.1"
VARNISH_INSTALL_DIR="/usr/local"
MAX_MEMORY="512"
VARNISH_PORT="6081"
VARNISH_ADMIN_PORT="6082"
BACKEND_PORT="8080"

_confirm(){
    while true
    do
        read -r -p "Ban muon cai dat Varnish Cache voi cac gia tri mac dinh? (y/n) " prompt_varnish
        echo
        if [[ "${prompt_varnish}" =~ ^([yY])$ || "${prompt_varnish}" =~ ^([nN])$ ]]; then
            break
        else
            printf "%s\n"  "${RED}Gia tri khong chinh xac. Vui long nhap lai.${NC}"
        fi
    done
}

_set_default_settings(){
    # Use default settings without prompting
    VARNISH_VERSION="7.7.1"
    VARNISH_INSTALL_DIR="/usr/local"
    MAX_MEMORY="512"
    VARNISH_PORT="6081"
    VARNISH_ADMIN_PORT="6082"
    BACKEND_PORT="8080"
    
    # No extra flags by default
    EXTRA_FLAGS=""
    
    # No custom build flags by default
    CUSTOM_CFLAGS=""
    CUSTOM_CPPFLAGS=""
    CUSTOM_LDFLAGS=""
    
    # Log the settings that will be used
    printf "${GREEN}%s${NC}\n" "Cai dat Varnish voi cac gia tri mac dinh:"
    printf "${GREEN}%s${NC}\n" "- Phien ban: ${VARNISH_VERSION}"
    printf "${GREEN}%s${NC}\n" "- Thu muc cai dat: ${VARNISH_INSTALL_DIR}"
    printf "${GREEN}%s${NC}\n" "- Bo nho toi da: ${MAX_MEMORY}MB"
    printf "${GREEN}%s${NC}\n" "- Port Varnish: ${VARNISH_PORT}"
    printf "${GREEN}%s${NC}\n" "- Port backend: ${BACKEND_PORT}"
}

_install_dependencies(){
    printf "${GREEN}%s${NC}\n" "Dang cai dat cac goi phu thuoc..."
    apt-get update -y
    if ! apt-get install -y build-essential pkg-config python3-sphinx python3-docutils graphviz automake libedit-dev libjemalloc-dev libncurses-dev libpcre3-dev libtool; then
        printf "${RED}%s${NC}\n" "Khong the cai dat cac goi phu thuoc. Vui long kiem tra lai."
        return 1
    fi
    return 0
}

_install_varnish_from_source(){
    printf "${GREEN}%s${NC}\n" "Dang cai dat Varnish Cache tu source (phien ban ${VARNISH_VERSION})..."
    printf "${GREEN}%s${NC}\n" "Qua trinh nay co the mat vai phut, vui long cho..."
    
    # Create temporary directory for building
    mkdir -p /tmp/varnish-build
    _cd_dir /tmp/varnish-build
    
    # Download Varnish source
    if ! wget -q "https://varnish-cache.org/downloads/varnish-${VARNISH_VERSION}.tgz"; then
        printf "${RED}%s${NC}\n" "Khong the tai phan ban Varnish ${VARNISH_VERSION}. Vui long kiem tra lai."
        return 1
    fi
    
    # Extract Varnish source
    if ! tar -xzf "varnish-${VARNISH_VERSION}.tgz"; then
        printf "${RED}%s${NC}\n" "Khong the giai nen Varnish. Vui long kiem tra lai."
        return 1
    fi
    
    _cd_dir "varnish-${VARNISH_VERSION}"
    
    # Build configure command
    CONFIGURE_CMD="./configure --prefix=${VARNISH_INSTALL_DIR}"
    
    if [[ -n "${EXTRA_FLAGS}" ]]; then
        CONFIGURE_CMD="${CONFIGURE_CMD} ${EXTRA_FLAGS}"
    fi
    
    # Set environment variables if defined
    if [[ -n "${CUSTOM_CFLAGS}" ]]; then
        export CFLAGS="${CUSTOM_CFLAGS}"
    fi
    
    if [[ -n "${CUSTOM_CPPFLAGS}" ]]; then
        export CPPFLAGS="${CUSTOM_CPPFLAGS}"
    fi
    
    if [[ -n "${CUSTOM_LDFLAGS}" ]]; then
        export LDFLAGS="${CUSTOM_LDFLAGS}"
    fi
    
    # Configure
    printf "${GREEN}%s${NC}\n" "Chay cau hinh: ${CONFIGURE_CMD}"
    if ! eval "${CONFIGURE_CMD}"; then
        printf "${RED}%s${NC}\n" "Loi trong qua trinh cau hinh Varnish. Vui long kiem tra logs."
        return 1
    fi
    
    # Make and install
    if ! make -j"$(nproc)"; then
        printf "${RED}%s${NC}\n" "Loi trong qua trinh bien dich Varnish. Vui long kiem tra logs."
        return 1
    fi
    
    if ! make install; then
        printf "${RED}%s${NC}\n" "Loi trong qua trinh cai dat Varnish. Vui long kiem tra logs."
        return 1
    fi
    
    ldconfig
    
    # Check if varnishd is installed
    if [[ ! -f "${VARNISH_INSTALL_DIR}/sbin/varnishd" ]]; then
        printf "${RED}%s${NC}\n" "Khong tim thay ${VARNISH_INSTALL_DIR}/sbin/varnishd. Cai dat that bai."
        return 1
    fi
    
    # Create varnish user and group
    if ! id -u varnish > /dev/null 2>&1; then
        useradd -r -l -U varnish
    fi
    
    # Create necessary directories
    mkdir -p /etc/varnish
    mkdir -p /var/lib/varnish
    chown varnish:varnish /var/lib/varnish
      # Create basic configuration
    cat > "/etc/varnish/default.vcl" << END
vcl 4.1;

# Default backend definition
backend default {
    .host = "127.0.0.1";
    .port = "${BACKEND_PORT}";
    .connect_timeout = 300s;
    .first_byte_timeout = 300s;
    .between_bytes_timeout = 300s;
}

# ACL for purging
acl purge {
    "localhost";
    "127.0.0.1";
}

sub vcl_recv {
    # Normalize the host header
    if (req.http.host) {
        set req.http.host = regsub(req.http.host, ":[0-9]+", "");
    }
    
    # Normalize the query arguments
    set req.url = std.querysort(req.url);
    
    # Allow purging
    if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
            return (synth(405, "Not allowed."));
        }
        return (purge);
    }
    
    # Only cache GET and HEAD requests
    if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
    }
    
    # Don't cache auth or logged in users
    if (req.http.Authorization || req.http.Cookie ~ "wordpress_logged_in_") {
        return (pass);
    }
    
    # Don't cache admin or login pages
    if (req.url ~ "wp-admin|wp-login") {
        return (pass);
    }
    
    # Remove cookies that we don't need
    if (req.http.Cookie) {
        set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\\s*)(_[_a-z]+|has_js)=[^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^\\s*;\\s*", "");
        if (req.http.Cookie == "") {
            unset req.http.Cookie;
        }
    }
    
    # Remove the "has_js" cookie
    set req.http.Cookie = regsuball(req.http.Cookie, "has_js=[^;]+(; )?", "");
    
    # Remove the WP Cookie and Google Analytics __* cookies.
    set req.http.Cookie = regsuball(req.http.Cookie, "(wp-settings-\d+=[^;]*|wp-settings-time-\d+=[^;]*|__utm.=[^;]*|__qc.=[^;]*|_ga=[^;]*|_gat=[^;]*|_dc_gtm_UA-\d+-\d+=[^;]*)(?:; )?", "");
    
    # Remove the Google Analytics _ga_* cookies
    set req.http.Cookie = regsuball(req.http.Cookie, "_ga_[A-Z0-9]+=[^;]+(;[ ]+)?", "");
    
    # Remove empty cookies.
    if (req.http.Cookie ~ "^\s*$") {
        unset req.http.Cookie;
    }
    
    return (hash);
}

sub vcl_hash {
    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }
    return (lookup);
}

sub vcl_backend_response {
    # Don't cache 50x responses
    if (beresp.status == 500 || beresp.status == 502 || beresp.status == 503 || beresp.status == 504) {
        return (abandon);
    }
    
    # Don't cache private or no-cache responses
    if (beresp.http.Cache-Control ~ "private" || beresp.http.Cache-Control ~ "no-cache") {
        return (pass);
    }
    
    # Set the cache TTL
    set beresp.ttl = 24h;
    set beresp.grace = 6h;
    
    # Remove cookies for static files
    if (bereq.url ~ "\\.(css|js|png|gif|jp(e)?g|swf|ico|woff|woff2|ttf|svg|eot)(\\?|$)") {
        unset beresp.http.Set-Cookie;
    }
    
    return (deliver);
}

sub vcl_deliver {
    # Add debug headers
    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
        set resp.http.X-Cache-Hits = obj.hits;
    } else {
        set resp.http.X-Cache = "MISS";
    }
    
    # Remove certain headers
    unset resp.http.Via;
    unset resp.http.X-Varnish;
    unset resp.http.Server;
    
    return (deliver);
}
END    # Create systemd service file
    cat > "/lib/systemd/system/varnish.service" << END
[Unit]
Description=Varnish HTTP accelerator
Documentation=https://www.varnish-cache.org/docs/
After=network-online.target nss-lookup.target

[Service]
Type=forking
LimitNOFILE=131072
LimitMEMLOCK=82000
ExecStart=${VARNISH_INSTALL_DIR}/sbin/varnishd -a :${VARNISH_PORT} -f /etc/varnish/default.vcl -s malloc,${MAX_MEMORY}m -T localhost:${VARNISH_ADMIN_PORT} -p default_ttl=3600 -p default_grace=3600
ExecReload=${VARNISH_INSTALL_DIR}/bin/varnishadm "vcl.load reload-\$(date +%%s) /etc/varnish/default.vcl" \
             && ${VARNISH_INSTALL_DIR}/bin/varnishadm "vcl.use reload-\$(date +%%s)"
User=varnish
Group=varnish
ProtectSystem=full
ProtectHome=true
PrivateTmp=true
PrivateDevices=true
RestartSec=5s
Restart=on-failure

[Install]
WantedBy=multi-user.target
END

    # Cleanup build files
    _cd_dir /tmp
    rm -rf /tmp/varnish-build
    
    # Enable and start Varnish
    systemctl daemon-reload
    systemctl enable varnish.service
    
    return 0
}

_configure_nginx_for_varnish() {
    printf "${GREEN}%s${NC}\n" "Dang cau hinh Nginx de hoat dong voi Varnish..."
    
    # Create a sample Nginx configuration for Varnish integration
    cat > "/etc/nginx/conf.d/varnish_example.conf.disabled" << END
# Example configuration for using Varnish with a domain
# To use this, modify your domain configuration file
# This is just a template and should be adapted for each domain

# Original server block that will serve content to Varnish
server {
    listen ${BACKEND_PORT};
    server_name example.com www.example.com;
    
    # Your normal server configuration here
    root /var/www/example.com;
    index index.php index.html;
    
    # PHP handling, etc.
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
    }
    
    # Other configurations...
}

# Public-facing server block that proxies to Varnish
server {
    listen 80;
    server_name example.com www.example.com;
    
    location / {
        proxy_pass http://127.0.0.1:${VARNISH_PORT};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_buffering on;
    }
}
END

    # Create a tool script to enable/disable Varnish for individual domains
    cat > "/usr/local/bin/varnish-domain-config" << 'SCRIPT'
#!/bin/bash

if [ "$#" -ne 2 ]; then
    echo "Usage: $0 domain_name [enable|disable]"
    exit 1
fi

DOMAIN="$1"
ACTION="$2"
VHOST_DIR="/etc/nginx/conf.d"
BACKEND_PORT="8080"
VARNISH_PORT="6081"

if [ ! -f "$VHOST_DIR/$DOMAIN.conf" ]; then
    echo "Error: Domain configuration not found at $VHOST_DIR/$DOMAIN.conf"
    exit 1
fi

case "$ACTION" in
    enable)
        # Create backup if it doesn't exist
        if [ ! -f "$VHOST_DIR/$DOMAIN.conf.novarnish" ]; then
            cp "$VHOST_DIR/$DOMAIN.conf" "$VHOST_DIR/$DOMAIN.conf.novarnish"
        fi
        
        # Extract server_name
        SERVER_NAMES=$(grep -E '^\s*server_name' "$VHOST_DIR/$DOMAIN.conf.novarnish" | head -1 | sed 's/server_name\s*//g' | sed 's/;//g')
        
        # Extract root directive
        ROOT_DIR=$(grep -E '^\s*root' "$VHOST_DIR/$DOMAIN.conf.novarnish" | head -1 | sed 's/root\s*//g' | sed 's/;//g')
        
        # Extract PHP-FPM socket if available
        PHP_FPM_SOCK=$(grep -E 'fastcgi_pass\s+unix:' "$VHOST_DIR/$DOMAIN.conf.novarnish" | head -1 | sed -E 's/.*fastcgi_pass\s+unix:([^;]+);.*/\1/g')
        if [ -z "$PHP_FPM_SOCK" ]; then
            PHP_FPM_SOCK="/var/run/php/php7.4-fpm.sock"
        fi
        
        # Create the new config with Varnish
        cat > "$VHOST_DIR/$DOMAIN.conf" << END
# Backend server (Delivers content to Varnish)
server {
    listen $BACKEND_PORT;
    server_name $SERVER_NAMES;
    
    root $ROOT_DIR;
    index index.php index.html;
    
    # PHP handling
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:$PHP_FPM_SOCK;
    }
    
    # Include other settings from original config (if needed)
    # include /etc/nginx/custom/$DOMAIN/*.conf;
}

# Front-end server (Proxies to Varnish)
server {
    listen 80;
    server_name $SERVER_NAMES;
    
    location / {
        proxy_pass http://127.0.0.1:$VARNISH_PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_buffering on;
    }
}
END
        echo "Varnish cache enabled for $DOMAIN"
        ;;
        
    disable)
        # Restore the original config if backup exists
        if [ -f "$VHOST_DIR/$DOMAIN.conf.novarnish" ]; then
            cp "$VHOST_DIR/$DOMAIN.conf.novarnish" "$VHOST_DIR/$DOMAIN.conf"
            echo "Varnish cache disabled for $DOMAIN"
        else
            echo "Error: Original configuration not found. Cannot disable Varnish."
            exit 1
        fi
        ;;
        
    *)
        echo "Invalid action. Use 'enable' or 'disable'."
        exit 1
        ;;
esac

# Test Nginx config
nginx -t
if [ $? -eq 0 ]; then
    systemctl reload nginx
    echo "Nginx configuration reloaded successfully."
else
    echo "Error in Nginx configuration. Please check and fix manually."
    exit 1
fi
SCRIPT

    # Make the script executable
    chmod +x "/usr/local/bin/varnish-domain-config"
    
    printf "${GREEN}%s${NC}\n" "Script cau hinh Varnish cho tung domain da duoc tao tai: /usr/local/bin/varnish-domain-config"
    printf "${GREEN}%s${NC}\n" "Su dung: varnish-domain-config ten_domain [enable|disable]"
    
    # Restart Nginx to apply changes
    if ! systemctl restart nginx; then
        printf "${RED}%s${NC}\n" "Khong the khoi dong lai Nginx. Vui long kiem tra cau hinh."
        return 1
    fi
    
    return 0
}

if service_running "varnish"; then
    printf "${GREEN}%s${NC}\n" "Varnish Cache da ton tai tren VPS."
else
    _confirm
    
    if [[ "${prompt_varnish}" =~ ^([yY])$ ]]; then
        # Set default settings without prompting
        _set_default_settings
        
        # Install dependencies
        if ! _install_dependencies; then
            printf "${RED}%s${NC}\n" "Cai dat cac goi phu thuoc that bai. Vui long kiem tra lai."
            exit 1
        fi
        
        # Install Varnish
        if ! _install_varnish_from_source; then
            printf "${RED}%s${NC}\n" "Cai dat Varnish that bai. Vui long kiem tra lai."
            exit 1
        fi
        
        # Configure Nginx
        if ! _configure_nginx_for_varnish; then
            printf "${RED}%s${NC}\n" "Cau hinh Nginx that bai. Vui long kiem tra lai."
            exit 1
        fi
          clear        if service_running "varnish"; then
            printf "${GREEN}%s${NC}\n" "Cai dat Varnish Cache thanh cong voi cac gia tri mac dinh:"
            printf "${GREEN}%s${NC}\n" "- Phien ban: ${VARNISH_VERSION}"
            printf "${GREEN}%s${NC}\n" "- Thu muc cai dat: ${VARNISH_INSTALL_DIR}"
            printf "${GREEN}%s${NC}\n" "- Bo nho toi da: ${MAX_MEMORY}MB"
            printf "${GREEN}%s${NC}\n" "- Port Varnish: ${VARNISH_PORT}"
            printf "${GREEN}%s${NC}\n" "- Port backend: ${BACKEND_PORT}"
            printf "${GREEN}%s${NC}\n" "- Port Admin: ${VARNISH_ADMIN_PORT}"
            printf "${GREEN}%s${NC}\n" ""
            printf "${GREEN}%s${NC}\n" "KIEN TRUC HE THONG:"
            printf "${GREEN}%s${NC}\n" "- Nguoi dung -> Nginx (port 80) -> Varnish (port ${VARNISH_PORT}) -> Backend (port ${BACKEND_PORT})"
            printf "${GREEN}%s${NC}\n" ""
            printf "${GREEN}%s${NC}\n" "HUONG DAN SU DUNG:"
            printf "${GREEN}%s${NC}\n" "1. De BAT Varnish cho tung domain:"
            printf "${GREEN}%s${NC}\n" "   varnish-domain-config ten_domain enable"
            printf "${GREEN}%s${NC}\n" ""
            printf "${GREEN}%s${NC}\n" "2. De TAT Varnish cho tung domain:"
            printf "${GREEN}%s${NC}\n" "   varnish-domain-config ten_domain disable"
            printf "${GREEN}%s${NC}\n" ""
            printf "${GREEN}%s${NC}\n" "3. De thay doi cau hinh Varnish:"
            printf "${GREEN}%s${NC}\n" "   - File VCL: /etc/varnish/default.vcl"
            printf "${GREEN}%s${NC}\n" "   - File systemd: /lib/systemd/system/varnish.service"
        else
            systemctl status varnish
            printf "${RED}%s${NC}\n" "Cai dat Varnish Cache that bai hoac Varnish khong hoat dong."
        fi
    else
        printf "${RED}%s${NC}\n" "Ban da huy bo cai dat Varnish Cache."
    fi
fi

cache_manage_varnish
