#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on Ubuntu             #
#                                                                    #
#                Author: TinyActive - Base On HOSTVN.VN Scripts      #
#                  Website: https://github.com/TinyActive/panel      #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

source /var/hostvn/menu/validate/rule
source /var/hostvn/menu/helpers/function

_purge_action(){
    clear
    printf "%s\n" "Lua chon loai purge cache ban muon thuc hien"
    PS3="Nhap vao lua chon cua ban [ 1 - 4 ]: "
    options=("Purge theo domain" "Purge theo URL cu the" "Purge tat ca cache" "Cancel")
    select opt in "${options[@]}"; do
        case $opt in
        "Purge theo domain")
            action="domain"
            break
            ;;
        "Purge theo URL cu the")
            action="url"
            break
            ;;
        "Purge tat ca cache")
            action="all"
            break
            ;;
        "Cancel")
            action="cancel"
            break
            ;;
        *) printf "${RED}%s${NC}\n" "Lua chon cua ban khong chinh xac. Vui long chon lai. $REPLY" ;;
        esac
    done
    sleep 1
}

_select_domain_for_purge() {
    domain=""
    if [[ "$(ls -A "${USER_DIR}")" ]]; then
        domains=()
        echo "${LIST_DOMAIN}"
        _cd_dir "${USER_DIR}"
        for entry in .*.conf; do
            domain_name=${entry/./}
            domain_name=${domain_name//.conf/}
            check_varnish=$(grep -w "varnish_enabled=yes" "${USER_DIR}/.${domain_name}.conf" 2>/dev/null)
            if [[ -n "${check_varnish}" ]]; then
                domains+=("${domain_name}")
            fi
        done
        if [ ${#domains[@]} -eq 0 ]; then
            ALERT=$(printf "%s\n" "${RED}Khong co domain nao dang su dung Varnish Cache.${NC}")
        else
            echo "Lua chon website can purge cache"
            PS3="${INPUT_SELECT} [0 = Thoat]: "
            select opt in "${domains[@]}"; do
                domain=$opt
                break
            done
        fi
    else
        ALERT=$(printf "%s\n" "${RED}${EMPTY_DOMAIN}${NC}")
    fi
}

_input_url_for_purge() {
    echo "Nhap URL can purge cache (bao gom domain):"
    echo "Vi du: https://example.com/page-name"
    echo "Hoac: https://example.com/wp-content/uploads/2024/01/image.jpg"
    echo "Pattern: https://example.com/wp-content/uploads/.*\.jpg"
    echo ""
    read -r -p "URL: " purge_url
    
    if [[ -z "${purge_url}" ]]; then
        ALERT=$(printf "%s\n" "${RED}URL khong duoc de trong.${NC}")
        return
    fi
    
    # Extract domain from URL
    domain=$(echo "${purge_url}" | sed -n 's|https\?://\([^/]*\).*|\1|p')
    url_path=$(echo "${purge_url}" | sed -n 's|https\?://[^/]*\(.*\)|\1|p')
    
    if [[ -z "${domain}" ]]; then
        ALERT=$(printf "%s\n" "${RED}Khong the xac dinh domain tu URL.${NC}")
        return
    fi
    
    # Check if domain is using Varnish
    check_varnish=$(grep -w "varnish_enabled=yes" "${USER_DIR}/.${domain}.conf" 2>/dev/null)
    if [[ -z "${check_varnish}" ]]; then
        ALERT=$(printf "%s\n" "${RED}Domain ${domain} khong su dung Varnish Cache.${NC}")
        return
    fi
}

_execute_varnish_command() {
    local cmd="$1"
    local description="$2"
    
    # Check if varnish secret file exists
    if [[ ! -f "/etc/varnish/secret" ]]; then
        printf "%s\n" "${RED}Khong tim thay file secret cua Varnish.${NC}"
        return 1
    fi
    
    # Execute varnish command
    result=$(varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082 "${cmd}" 2>&1)
    exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
        printf "%s\n" "${GREEN}${description} thanh cong.${NC}"
        if [[ -n "${result}" ]]; then
            printf "%s\n" "${result}"
        fi
        return 0
    else
        printf "%s\n" "${RED}${description} that bai.${NC}"
        printf "%s\n" "${RED}Loi: ${result}${NC}"
        return 1
    fi
}

_purge_domain() {
    printf "%s\n" "${GREEN}Dang purge cache cho domain: ${domain}${NC}"
    
    # Purge all pages for this domain
    cmd="ban req.http.host == \"${domain}\""
    _execute_varnish_command "${cmd}" "Purge cache domain ${domain}"
    
    # Also purge www version if exists
    cmd="ban req.http.host == \"www.${domain}\""
    _execute_varnish_command "${cmd}" "Purge cache www.${domain}"
}

_purge_url() {
    printf "%s\n" "${GREEN}Dang purge cache cho URL: ${purge_url}${NC}"
    
    if [[ -z "${url_path}" ]]; then
        url_path="/"
    fi
    
    # Purge specific URL
    cmd="ban req.http.host == \"${domain}\" && req.url ~ \"^${url_path}\""
    _execute_varnish_command "${cmd}" "Purge cache URL ${purge_url}"
}

_purge_all() {
    printf "%s\n" "${YELLOW}Canh bao: Ban dang purge tat ca cache trong Varnish!${NC}"
    while true; do
        read -r -p "Ban co chac chan muon purge tat ca cache khong (y/n)? " confirm_purge_all
        echo
        if [[ "${confirm_purge_all}" =~ ^([yY])$ ]]; then
            printf "%s\n" "${GREEN}Dang purge tat ca cache...${NC}"
            cmd="ban req.url ~ \".*\""
            _execute_varnish_command "${cmd}" "Purge tat ca cache"
            break
        elif [[ "${confirm_purge_all}" =~ ^([nN])$ ]]; then
            ALERT=$(printf "%s\n" "${RED}Huy thao tac purge tat ca cache.${NC}")
            break
        else
            printf "%s\n" "${RED}Lua chon cua ban khong chinh xac. Vui long nhap lai.${NC}"
        fi
    done
}

_confirm_purge() {
    while true; do
        if [[ "${action}" == "domain" ]]; then
            read -r -p "Ban co muon purge cache cho domain ${domain} khong (y/n)? " prompt_confirm
        elif [[ "${action}" == "url" ]]; then
            read -r -p "Ban co muon purge cache cho URL ${purge_url} khong (y/n)? " prompt_confirm
        fi
        echo
        if [[ "${prompt_confirm}" =~ ^([yY])$ || "${prompt_confirm}" =~ ^([nN])$ ]]; then
            break
        else
            printf "%s\n" "${RED}Lua chon cua ban khong chinh xac. Vui long nhap lai.${NC}"
        fi
    done
}

_run() {
    if [[ "${action}" == "domain" ]]; then
        _confirm_purge
        if [[ "${prompt_confirm}" =~ ^([yY])$ ]]; then
            _purge_domain
        else
            ALERT=$(printf "%s\n" "${RED}Huy thao tac.${NC}")
        fi
    elif [[ "${action}" == "url" ]]; then
        _confirm_purge
        if [[ "${prompt_confirm}" =~ ^([yY])$ ]]; then
            _purge_url
        else
            ALERT=$(printf "%s\n" "${RED}Huy thao tac.${NC}")
        fi
    elif [[ "${action}" == "all" ]]; then
        _purge_all
    fi
}

# Check if Varnish is running
if ! service_running "varnish"; then
    printf "%s\n" "${RED}Varnish Cache khong dang chay.${NC}"
    printf "%s\n" "${RED}Vui long bat Varnish truoc khi su dung tinh nang nay.${NC}"
    menu_cache
    exit 1
fi

domain=""
purge_url=""
url_path=""
ALERT=""
action=""

_purge_action

if [[ -z "${action}" || "${action}" == "cancel" ]]; then
    clear
    printf "${RED}%s${NC}\n" "Huy thao tac."
else
    if [[ "${action}" == "domain" ]]; then
        _select_domain_for_purge
        if [[ -z "${domain}" && -z "${ALERT}" ]]; then
            clear
            printf "%s\n" "${RED}Ban da chon huy thao tac${NC}"
        else
            _run
        fi
    elif [[ "${action}" == "url" ]]; then
        _input_url_for_purge
        if [[ -z "${ALERT}" ]]; then
            _run
        fi
    elif [[ "${action}" == "all" ]]; then
        _run
    fi
    
    if [[ -n "${ALERT}" ]]; then
        clear
        printf "%s\n" "${ALERT}"
    fi
fi

printf "%s\n" ""
read -r -p "Nhan Enter de tiep tuc..."
menu_cache
