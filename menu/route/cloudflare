#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on Ubuntu             #
#                                                                    #
#                Author: Sanvv - HOSTVN Technical                    #
#                  Website: https://hostvn.vn                        #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

# shellcheck disable=SC1091
source /var/hostvn/menu/helpers/cloudflare_api
source /var/hostvn/menu/validate/rule
source /var/hostvn/menu/lang/vi # Load language file

# Định nghĩa hàm check_domain để kiểm tra domain hợp lệ bằng script check_value
check_domain() {
    /var/hostvn/menu/validate/check_value domain "$1"
}

_cloudflare_auth() {
    local cf_email
    local cf_api_key
    local auth_method="key"
    local force_reauth=${1:-false}

    # Try to load config first
    if ! _load_cloudflare_config || [[ "${force_reauth}" == "true" ]]; then
        echo "${CLOUDFLARE_API_INFO}"
        echo "${CLOUDFLARE_API_TYPES}"
        echo ""
        
        echo "${CLOUDFLARE_EMAIL}"
        read -r cf_email
        
        echo "${CLOUDFLARE_API_KEY}"
        read -r cf_api_key

        if ! _validate_api_key "${cf_email}" "${cf_api_key}"; then
            echo "${CLOUDFLARE_API_KEY_INVALID}"
            echo "${CLOUDFLARE_CHECK_DEBUG_LOG}"
            return 1
        else
            echo "${CLOUDFLARE_API_KEY_VALID}"
            
            # Check if we're using an API Token (set by _validate_api_key)
            if [[ "${CF_AUTH_METHOD}" == "token" ]]; then
                auth_method="token"
            fi
            
            _save_cloudflare_config "${cf_email}" "${cf_api_key}" "${auth_method}"
            return 0
        fi
    else
        cf_email="${CF_EMAIL}"
        cf_api_key="${CF_API_KEY}"
        auth_method="${CF_AUTH_METHOD}"
        return 0
    fi
}

_select_cloudflare_domain() {
    local cf_email="$1"
    local cf_api_key="$2"
    local zone_id=""
    
    echo "=== DEBUG: Selecting Cloudflare domain ==="
    echo "Email: ${cf_email}"
    echo "API Key: ${cf_api_key:0:10}..."
    echo "Auth Method: ${CF_AUTH_METHOD}"
    echo ""
    
    # Get Cloudflare zones
    echo "Fetching zones from Cloudflare..."
    local zones_response
    zones_response=$(_get_cloudflare_zones "${cf_email}" "${cf_api_key}")
    
    echo "Zones API response status:"
    if [[ "${zones_response}" == *'"success":true'* ]]; then
        echo "✓ Zones API call successful"
    else
        echo "✗ Zones API call failed"
        echo "Response preview: ${zones_response:0:300}..."
        echo "Full response saved to: /tmp/cloudflare_dns_debug.log"
        return 1
    fi
    
    # Check if we have domains
    local domain_count
    domain_count=$(echo "${zones_response}" | grep -o '"count":[^,]*' | grep -o '[0-9]\+')
    echo "Domain count: ${domain_count}"
    
    if [[ "$(echo "${zones_response}" | grep -o '"success":true')" && "${domain_count}" != "0" && -n "${domain_count}" ]]; then
        echo "Processing domains..."
        
        # Extract domain names
        local domains
        if command -v jq >/dev/null 2>&1; then
            echo "Using jq to extract domains"
            domains=$(echo "${zones_response}" | jq -r '.result[].name' 2>/dev/null)
        else
            echo "Using grep to extract domains"
            domains=$(echo "${zones_response}" | grep -o '"name":"[^"]*' | cut -d'"' -f4)
        fi
        
        echo "Extracted domains:"
        echo "${domains}"
        echo ""
        
        if [[ -z "${domains}" ]]; then
            echo "No domains found in response"
            return 1
        fi
        
        # Create numbered list of domains
        echo "${CLOUDFLARE_SELECT_DOMAIN}"
        local i=1
        while IFS= read -r domain; do
            if [[ -n "${domain}" ]]; then
                echo "${i}. ${domain}"
                i=$((i + 1))
            fi
        done <<< "${domains}"
        
        echo "0. ${BACK_OPTION}"
        echo ""
        
        # Ask user to select domain
        local selection
        read -r -p "${SELECT_OPTION}" selection
        
        echo "User selected: ${selection}"
        
        if [[ "${selection}" == "0" ]]; then
            echo "User chose to go back"
            return 1
        fi
        
        # Validate selection
        if ! [[ "${selection}" =~ ^[0-9]+$ ]] || [[ "${selection}" -lt 1 ]]; then
            echo "Invalid selection: ${selection}"
            return 1
        fi
        
        # Get selected domain
        local selected_domain
        selected_domain=$(echo "${domains}" | sed -n "${selection}p")
        
        echo "Selected domain: '${selected_domain}'"
        
        if [[ -z "${selected_domain}" ]]; then
            echo "No domain found at position ${selection}"
            return 1
        fi
        
        # Get zone ID for selected domain
        echo "Getting zone ID for domain: ${selected_domain}"
        zone_id=$(_get_zone_id "${cf_email}" "${cf_api_key}" "${selected_domain}")
        
        echo "Zone ID: ${zone_id}"
        
        if [[ -n "${zone_id}" ]]; then
            echo "Successfully got zone ID"
            echo "${selected_domain}:${zone_id}"
            return 0
        else
            echo "Failed to get zone ID for domain: ${selected_domain}"
            return 1
        fi
    else
        echo "${CLOUDFLARE_NO_DOMAINS}"
        echo "Debug info:"
        echo "- Success field: $(echo "${zones_response}" | grep -o '"success":[^,]*')"
        echo "- Count field: $(echo "${zones_response}" | grep -o '"count":[^,]*')"
        echo "- Result field exists: $(echo "${zones_response}" | grep -c '"result"')"
        return 1
    fi
}

cloudflare_add_domain() {
    _cloudflare_auth

    echo "${CLOUDFLARE_ENTER_DOMAIN}"
    local domain
    read -r domain

    # Validate domain format
    if ! check_domain "${domain}"; then
        echo "${WRONG_DOMAIN}"
        return 1
    fi

    # Add domain to Cloudflare
    local result
    result=$(_add_domain_to_cloudflare "${CF_EMAIL}" "${CF_API_KEY}" "${domain}")

    if [[ "${result}" == error:* ]]; then
        local error
        error=$(echo "${result}" | cut -d':' -f2-)
        echo "${error}"
    else
        local ns1
        local ns2
        ns1=$(echo "${result}" | cut -d':' -f2)
        ns2=$(echo "${result}" | cut -d':' -f3)
        echo "${CLOUDFLARE_DOMAIN_ADDED}"
        echo "NS1: ${ns1}"
        echo "NS2: ${ns2}"
    fi
}

cloudflare_add_dns_record() {
    echo "=== DEBUG: Bắt đầu quản lý DNS ==="
    echo "Checking authentication..."
    
    # Clear previous debug logs
    rm -f /tmp/cloudflare_dns_debug.log
    
    if ! _cloudflare_auth; then
        return 1
    fi

    # Call the DNS management script
    /var/hostvn/menu/controller/cloudflare/dns_management
}

cloudflare_management() {
    clear
    printf "=========================================================================\n"
    printf "                       CLOUDFLARE MANAGEMENT                             \n"
    printf "=========================================================================\n"
    printf "1. Them domain vao CloudFlare\n"
    printf "2. %s\n" "${CLOUDFLARE_MANAGE_DNS}"
    printf "0. %s\n" "${BACK_OPTION}"
    printf "=========================================================================\n"
    read -r -p "${INPUT_SELECT}" CF_OPTION
    
    case "${CF_OPTION}" in
        1)
            cloudflare_add_domain
            ;;
        2)
            cloudflare_add_dns_record
            ;;
        0)
            . /var/hostvn/menu/menu_tools
            ;;
        *)
            cloudflare_management
            ;;
    esac
    cloudflare_management
}

cloudflare_management
